# Reunião sobre o Shiny app
# * Conectando o GitHub e o RStudio: ----
credentials::set_github_pat("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")

# * Instalando e lendo alguns pacotes solicitados: ----
install.packages(c(  "gapminder", "ggforce", "gh", "globals", "openintro", 
                     "profvis",  "RSQLite", "shiny", "shinycssloaders", "shinyFeedback", 
                     "shinythemes", "testthat", "thematic", "tidyverse", "vroom",  "waiter", 
                     "xml2", "zeallot"))

library(shiny)

# * Criando um diretório e arquivo para o app: ----
##ui <- fluidPage("Hello, world!")

##server <- function(input, output, session) {}

##shinyApp(ui, server) # Este comando irá construir e iniciar uma aplicação shiny.

# * Adicionando novos comandos ao UI: ----
ui <- fluidPage(  
  selectInput("dataset", label = "Dataset", choices = ls("package:datasets")), 
  verbatimTextOutput("summary"),  tableOutput("table")
  )

##server <- function(input, output, session) {}

##shinyApp(ui, server)

# fluidPage() é uma função de layout que estabelece a estrutura visual básica da página;
# selectInput() é um controle de entrada que permite ao usuário interagir com o aplicativo, fornecendo um valor;
# verbatimTextOutput() and tableOutput() são controles de saída: 
# - verbatimTextOutput() exibe o código;
# - tableOutput() exibe as tabelas. 


# * Adicionando "Behavior": ----
server <- function(input, output, session) { 
  output$summary <- renderPrint({   
    dataset <- get(input$dataset, "package:datasets")   
    summary(dataset)  
  })  
  
output$table <- renderTable({  
  dataset <- get(input$dataset, "package:datasets")    
  dataset 
})
}

shinyApp(ui, server)
