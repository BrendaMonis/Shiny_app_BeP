---
title: "User Feedback"
author: "Brenda M. Moreno"
date: "02/04/2023"
output:
  html_document: 
    toc: yes
    highlight: kate
    theme: flatly
    number_sections: yes
runtime: shiny
---

# CHAPTER 8:

  In this chapter We’ll start with techniques for validation, informing the user when an input (or combination of inputs) is in an invalid state. We’ll then continue on to notification, sending general messages to the user, and progress bars, which give details for timeconsuming operations made up of many small steps. We’ll finish up by discussing dangerous actions and how you give your users peace of mind with confirmation dialogs or the ability to undo an action.
  
# Introduction:

  If you haven’t already installed Shiny, install it now with:
```{r, eval = FALSE} 
install.packages("shiny")
```

  Then load in your current R session:
```{r, eval = TRUE} 
library(shiny)
library(ggplot2)
``` 
  
# Validation:
  The first and most important feedback you can give to the user is that they’ve given you bad input -> this is a error control.

## Validating Input:
  A great way to give additional feedback to the user is via the shinyFeedback package. Using it is a two-step process. First, you add useShinyFeedback() to the ui.
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  shinyFeedback::useShinyFeedback(),
  numericInput("n", "n", value = 10),
  textOutput("half")
)

server <- function(input, output) {
}

shinyApp(ui, server)
```
  In your server() function, you call one of the feedback functions: feedback(), feedbackWarning(), feedbackDanger(), and feedbackSuccess().They all have three key arguments:           
  - inputId: The ID of the input where the feedback should be placed.           
  - show: A logical value determining whether or not to show the feedback.            
  - text: The text to display.            
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  shinyFeedback::useShinyFeedback(),
  numericInput("n", "n", value = 10),
  textOutput("half")
)

server <- function(input, output, session) {
  half <- reactive({
    even <- input$n %% 2 == 0
    shinyFeedback::feedbackWarning("n", !even, "Please select an even number")
    input$n / 2
  })
  output$half <- renderText(half())
}

shinyApp(ui, server)
```       
        
  Notice that the error message is displayed but the output is still updated. Typicall you don’t want that because invalid inputs are likely to cause uninformative R errors that you don’t want to show to the user.            req(), short for “required.”
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  shinyFeedback::useShinyFeedback(),
  numericInput("n", "n", value = 10),
  textOutput("half")
)

server <- function(input, output, session) {
  half <- reactive({
    even <- input$n %% 2 == 0
    shinyFeedback::feedbackWarning("n", !even, "Please select an even number")
    req(even)
    input$n / 2
  })
  output$half <- renderText(half())
}

shinyApp(ui, server)
```      
  When the input to req() is not true, it sends a special signal to tell Shiny that the reactive does not have all the inputs that it requires, so it should be “paused.” We’ll take a brief digress on to talk about this before we come back to using it in concert with validate().
  
## Canceling Execution with req()
  We need some way to “pause” reactives so that nothing happens until some condition is true. That’s the job of req(), which checks for required values before allowing a reactive producer to continue.
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  selectInput("language", "Language", choices = c("", "English", "Maori")),
  textInput("name", "Name"),
  textOutput("greeting")
)
server <- function(input, output, session) {
  greetings <- c(
    English = "Hello",
    Maori = "Ki ora"
  )
  output$greeting <- renderText({
    paste0(greetings[[input$language]], " ", input$name, "!")
  })
}

shinyApp(ui, server)
``` 
  We can fix a problem by using req() ???????
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  selectInput("language", "Language", choices = c("", "English", "Maori")),
  textInput("name", "Name"),
  textOutput("greeting")
)
server <- function(input, output, session) {
  greetings <- c(
    English = "Hello",
    Maori = "Ki ora"
  )
  output$greeting <- renderText({
    req(input$language, input$name)
    paste0(greetings[[input$language]], " ", input$name, "!")
  })
}

shinyApp(ui, server)
``` 
  -> What is the difference??? I didn't understand!!!!\
      
  **req()** is designed so that req(input$x) will only proceed if the user has supplied a value, regardless of the type of input control.2 You can also use req() with your own logical statement if needed.

## req() and Validation
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  shinyFeedback::useShinyFeedback(),
  textInput("dataset", "Dataset name"),
  tableOutput("data")
)

server <- function(input, output, session) {
  data <- reactive({
    req(input$dataset)

    exists <- exists(input$dataset, "package:datasets")
    shinyFeedback::feedbackDanger("dataset", !exists, "Unknown dataset")
    req(exists, cancelOutput = TRUE)

    get(input$dataset, "package:datasets")
})
  output$data <- renderTable({
    head(data())
  })
}

shinyApp(ui, server)
``` 
  -> This dataset is saved in R??
  
## Validate Output 

  shinyFeedback is great when the problem is related to a single input. But sometimes the invalid state is a result of a combination of inputs. In this case, it doesn’t really make sense to put the error next to an input and instead it makes more sense to put it in the output.
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  numericInput("x", "x", value = 0),
  selectInput("trans", "transformation",
    choices = c("square", "log", "square-root")
  ),
  textOutput("out")
)

server <- function(input, output, session) {
  output$out <- renderText({
    if (input$x < 0 && input$trans %in% c("log", "square-root")) {
      validate("x can not be negative for this transformation")
    }
    switch(input$trans,
      square = input$x ^ 2,
      "square-root" = sqrt(input$x),
      log = log(input$x)
    )
  })
}

shinyApp(ui, server)
``` 

# Notifications
 If there isn’t a problem and you just want to let the user know what’s happening, use a notification. In Shiny, notifications are created with **showNotification()** and stack in the bottom right of the page. There are three basic ways to use showNotification():\
  • To show a transient notification that automatically disappears after a fixed amount of time;\
  • To show a notification when a process starts and remove it when the process ends;\
  • To update a single notification with progressive updates.

## Transient Notification
  The simplest way to use **showNotification()** is to call it with a single argument: the message that you want to display.
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  actionButton("goodnight", "Good night")
)

server <- function(input, output, session) {
  observeEvent(input$goodnight, {
    showNotification("So long")
    Sys.sleep(1)
    showNotification("Farewell")
    Sys.sleep(1)
    showNotification("Auf Wiedersehen")
    Sys.sleep(1)
    showNotification("Adieu")
  })
}

shinyApp(ui, server)
``` 
By default, the message will disappear after five seconds, but you can override it by setting duration, or the user can dismiss it earlier by clicking the close button. If you want to make the notification more prominent, you can set the type argument to one of “message,” “warning,” or “error”:
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  actionButton("goodnight", "Good night")
)

server <- function(input, output, session) {
  observeEvent(input$goodnight, {
    showNotification("So long")
    Sys.sleep(1)
    showNotification("Farewell", type = "message")
    Sys.sleep(1)
    showNotification("Auf Wiedersehen", type = "warning")
    Sys.sleep(1)
    showNotification("Adieu", type = "error")
  })
}

shinyApp(ui, server)
``` 

## Removing on Completion
  It’s often useful to tie the presence of a notification to a long-running task. In this case, you want to show the notification when the task starts and remove the notification when the task completes. To do this, you’ll need to:\
  • Set **duration = NULL and closeButton = FALSE** so that the notification stays visible until the task is complete;\
  • Store the id returned by showNotification(), and then pass this value to remove Notification(). The most reliable way to do so is to use **on.exit()**, which ensures that the notification is removed regardless of how the task completes (either successfully or with an error). 

    ??? what is the ui??? he just do the server
    
## Progressive Updates
  You can instead update a single notification by capturing the
id from the first call and using it in subsequent calls:
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  tableOutput("data")
)

server <- function(input, output, session) {
  notify <- function(msg, id = NULL) {
    showNotification(msg, id = id, duration = NULL, closeButton = FALSE)
  }
  data <- reactive({
    id <- notify("Reading data...")
    on.exit(removeNotification(id), add = TRUE)
    Sys.sleep(1)

    notify("Reticulating splines...", id = id)
    Sys.sleep(1)

    notify("Herding llamas...", id = id)
    Sys.sleep(1)

    notify("Orthogonalizing matrices...", id = id)
    Sys.sleep(1)

    mtcars
  })
  output$data <- renderTable(head(data()))
}

shinyApp(ui, server)
``` 

# Progress Bars
  In this section, he show two techniques for displaying **progress bars**, one built into Shiny and one from the waiter package developed by John Coene.
  
    ??? I didin't understand very well

## Shiny
  To create a progress bar with Shiny, you need to use **withProgress()** and **incProgress()**.
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  numericInput("steps", "How many steps?", 10),
  actionButton("go", "go"),
  textOutput("result")
)

server <- function(input, output, session) {
  data <- eventReactive(input$go, {
    withProgress(message = "Computing random number", {
      for (i in seq_len(input$steps)) {
        Sys.sleep(0.5)
        incProgress(1 / input$steps)
      }
      runif(1)
    })
  })
  output$result <- renderText(round(data(), 2))
}

shinyApp(ui, server)
```

## waiter
  The built-in progress bar is great for the basics, but if you want something that provides more visual options, you might try the waiter package. Adapting the preceding code to work with waiter is straightforward. In the UI, we add **use_waitress()**:
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  waiter::use_waitress(),
  numericInput("steps", "How many steps?", 10),
  actionButton("go", "go"),
  textOutput("result")
)

server <- function(input, output, session) {
  data <- eventReactive(input$go, {
    waitress <- waiter::Waitress$new(max = input$steps)
    on.exit(waitress$close())

    for (i in seq_len(input$steps)) {
      Sys.sleep(0.5)
      waitress$inc(1)
    }
    runif(1)
  })
  output$result <- renderText(round(data(), 2))
}

shinyApp(ui, server)
```  
  You can override the default theme to use one of the following:\
  - overlay: An opaque progress bar that hides the whole page;\
  - overlay-opacity: A translucent progress bar that covers the whole page;\
  - overlay-percent: An opaque progress bar that also displays a numeric percentage.\
  Instead of showing a progress bar for the entire page, you can overlay it on an existing input or output by setting the selector parameter. For example: 


    waitress <- Waitress$new(selector = "#steps", theme = "overlay")

# Spinners
  Sometimes you don’t know exactly how long an operation will take, and you just want to display an animated spinner that reassures the user that something is happening. You can also use the waiter package for this task; just switch from using a Waitress to using a Waiter:
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  waiter::use_waitress(),
  actionButton("go", "go"),
  textOutput("result")
)

server <- function(input, output, session) {
  data <- eventReactive(input$go, {
    waiter <- waiter::Waiter$new()
    waiter$show()
    on.exit(waiter$hide())

    Sys.sleep(sample(5, 1))
    runif(1)
  })
  output$result <- renderText(round(data(), 2))
}

shinyApp(ui, server)
```  
  
    ??? I didin't understand very well

Like Waitress, you can also use Waiters for specific outputs. These waiters can utomatically remove the spinner when the output updates, so the code is even simpler:
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  waiter::use_waitress(),
  actionButton("go", "go"),
  plotOutput("plot"),
)

server <- function(input, output, session) {
  data <- eventReactive(input$go, {
    waiter::Waiter$new(id = "plot")$show()

    Sys.sleep(3)
    data.frame(x = runif(50), y = runif(50))
  })
 
   output$plot <- renderPlot(plot(data()), res = 96)
}

shinyApp(ui, server)
``` 

    ??? I didin't understand very well

The waiter package provides a large variety of spinners to choose from; see your options at ?waiter::spinners and then choose one with (for example) Waiter$new(html = spin_ripple()).
```{r, eval = TRUE, echo = TRUE} 
library(shinycssloaders)

ui <- fluidPage(
  actionButton("go", "go"),
  withSpinner(plotOutput("plot")),
)

server <- function(input, output, session) {
  data <- eventReactive(input$go, {
    Sys.sleep(3)
    data.frame(x = runif(50), y = runif(50))
  })
  
  output$plot <- renderPlot(plot(data()), res = 96)
}
shinyApp(ui, server)
```     
    
# Confirming and Undoing    
  Sometimes an action is potentially dangerous, and you either want to make sure that the user really wants to do it or you want to give them the ability to back out before it’s too late.  

## Explicit Confirmation
  The easiest way is to use a dialog box, which forces the user to pick from one of a small set of actions. In Shiny, you create a dialog box with modalDialog().

    ??? what is the complet code???
```{r, eval = TRUE, echo = TRUE} 
modal_confirm <- modalDialog(
  "Are you sure you want to continue?",
  title = "Deleting files",
  footer = tagList(
    actionButton("cancel", "Cancel"),
    actionButton("ok", "Delete", class = "btn btn-danger")
  )
)


ui <- fluidPage(
  actionButton("delete", "Delete all files?")
)

server <- function(input, output, session) {
  observeEvent(input$delete, {
    showModal(modal_confirm)
  })
  observeEvent(input$ok, {
    showNotification("Files deleted")
    removeModal()
  })
  observeEvent(input$cancel, {
    removeModal()
  })
}
shinyApp(ui, server)
``` 

## Undoing an Action
  Explicit confirmation is most useful for destructive actions that are only performed infrequently. You should avoid it if you want to reduce the errors made by frequent actions. For example, this technique would not work for Twitter. If there was a dialog
box that said “Are you sure you want to tweet this?” you would soon learn to automatically click yes and still feel the same feeling of regret when you notice a typo 10 seconds after tweeting.
```{r, eval = TRUE, echo = TRUE} 
ui <- fluidPage(
  textAreaInput("message",
    label = NULL,
    placeholder = "What's happening?",
    rows = 3
  ),
  actionButton("tweet", "Tweet")
)

runLater <- function(action, seconds = 3) {
observeEvent(
invalidateLater(seconds * 1000), action,
ignoreInit = TRUE,
once = TRUE,
ignoreNULL = FALSE,
autoDestroy = FALSE
)
}
server <- function(input, output, session) {
  waiting <- NULL
  last_message <- NULL

  observeEvent(input$tweet, {
    notification <- glue::glue("Tweeted '{input$message}'")
    last_message <<- input$message
    updateTextAreaInput(session, "message", value = "")

  showNotification(
    notification,
    action = actionButton("undo", "Undo?"),
    duration = NULL,
    closeButton = FALSE,
    id = "tweeted",
    type = "warning"
    )
  
    waiting <<- runLater({
      cat("Actually sending tweet...\n")
     removeNotification("tweeted")
   })
  })
  observeEvent(input$undo, {
    waiting$destroy()
    showNotification("Tweet retracted", id = "tweeted")
    updateTextAreaInput(session, "message", value = last_message)
  })
}
shinyApp(ui, server)
``` 

